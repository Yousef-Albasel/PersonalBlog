<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OOP Course Code-Examples Series on Albasel Blog</title>
    <link>https://albasel.netlify.app/series/oop-course-code-examples-series/</link>
    <description>Recent content in OOP Course Code-Examples Series on Albasel Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jan 2024 16:42:29 +0200</lastBuildDate><atom:link href="https://albasel.netlify.app/series/oop-course-code-examples-series/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code Examples #1 - Important Object Slicing Example</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/important-object-slicing-example/</link>
      <pubDate>Sun, 07 Jan 2024 16:42:29 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/important-object-slicing-example/</guid>
      <description>Here is an example of object slicing i found in the midterm exam
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include &amp;lt;iostream&amp;gt; using namespace std; class Pet { public: Pet(){}; Pet(string name) : name(name){}; virtual void print() { cout &amp;lt;&amp;lt; name; }; // Print Pet name protected: string name; }; class Dog : public Pet { public: Dog(string breed, string petname) : breed(breed), Pet(petname){}; virtual void print() { cout &amp;lt;&amp;lt; breed &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; name; }; private: string breed; }; class Cat : public Pet { public: Cat(string name, string color) : color(color), Pet(name){}; virtual void print() { cout &amp;lt;&amp;lt; color &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; name; }; private: string color; }; class PetList { public: // initializes maxPets to n and nPets to 0 and creates an array PetList(int n) : maxPets(n) { pets = new Pet[maxPets]; }; Pet &amp;amp;operator[](int i) { return pets[i]; }; private: Pet *pets; // Pointer to dyanamic array of pets int maxPets = 10; // maximum number of pet objects that can be stored int nPets = 0; // actual number of pet objects stored in the list }; int main() { PetList lst(3); lst[0] = Pet(&amp;#34;Tito&amp;#34;); lst[1] = Cat(&amp;#34;Luna&amp;#34;, &amp;#34;Fluffy&amp;#34;); lst[2] = Dog(&amp;#34;Puppy&amp;#34;, &amp;#34;Ga3fr&amp;#34;); for (auto i = 0; i &amp;lt; 3; i++) { lst[i].</description>
    </item>
    
  </channel>
</rss>
