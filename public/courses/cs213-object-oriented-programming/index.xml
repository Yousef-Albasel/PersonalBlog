<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS213 Object Oriented Programming on Albasel Blog</title>
    <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/</link>
    <description>Recent content in CS213 Object Oriented Programming on Albasel Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Dec 2023 22:08:35 +0200</lastBuildDate><atom:link href="https://albasel.netlify.app/courses/cs213-object-oriented-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture Ten   Const and Exception Handling</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-ten-const-and-exception-handling/</link>
      <pubDate>Sun, 07 Jan 2024 17:43:24 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-ten-const-and-exception-handling/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Code Examples #1 - Important Object Slicing Example</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/important-object-slicing-example/</link>
      <pubDate>Sun, 07 Jan 2024 16:42:29 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/important-object-slicing-example/</guid>
      <description>Here is an example of object slicing i found in the midterm exam
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include &amp;lt;iostream&amp;gt; using namespace std; class Pet { public: Pet(){}; Pet(string name) : name(name){}; virtual void print() { cout &amp;lt;&amp;lt; name; }; // Print Pet name protected: string name; }; class Dog : public Pet { public: Dog(string breed, string petname) : breed(breed), Pet(petname){}; virtual void print() { cout &amp;lt;&amp;lt; breed &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; name; }; private: string breed; }; class Cat : public Pet { public: Cat(string name, string color) : color(color), Pet(name){}; virtual void print() { cout &amp;lt;&amp;lt; color &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; name; }; private: string color; }; class PetList { public: // initializes maxPets to n and nPets to 0 and creates an array PetList(int n) : maxPets(n) { pets = new Pet[maxPets]; }; Pet &amp;amp;operator[](int i) { return pets[i]; }; private: Pet *pets; // Pointer to dyanamic array of pets int maxPets = 10; // maximum number of pet objects that can be stored int nPets = 0; // actual number of pet objects stored in the list }; int main() { PetList lst(3); lst[0] = Pet(&amp;#34;Tito&amp;#34;); lst[1] = Cat(&amp;#34;Luna&amp;#34;, &amp;#34;Fluffy&amp;#34;); lst[2] = Dog(&amp;#34;Puppy&amp;#34;, &amp;#34;Ga3fr&amp;#34;); for (auto i = 0; i &amp;lt; 3; i++) { lst[i].</description>
    </item>
    
    <item>
      <title>Lecture Nine   Templates and Classes</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-nine-templates-and-classes/</link>
      <pubDate>Tue, 02 Jan 2024 23:35:26 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-nine-templates-and-classes/</guid>
      <description>Function template: a pattern for a function that can work with many data types
When written, parameters are left for the data types
When called, compiler generates code for specific data types determined in function call.
Better than Function Overloading:
You need to create only one version of the function 1- Bug fixes will be in one place 2- But number of parameters will be fixed.
When passing a class object to a function template, ensure that all operators performed by the function template are defined or overloaded in the class definition</description>
    </item>
    
    <item>
      <title>Lecture Eight -  OOP V (Unified Modeling Language)</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-eight-oop-v-unified-modeling-language/</link>
      <pubDate>Sun, 31 Dec 2023 23:12:28 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-eight-oop-v-unified-modeling-language/</guid>
      <description>Unified Modeling Language, is a standardized modeling language widely used in software engineering for visualizing, specifying, constructing, and documenting the artifacts of a software system.
I will be using this Very good reference : https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-class-diagram/ for most of the page, you can use any, but don&amp;rsquo;t forget to check the tasks here.
These are some types of UML Diagrams. Please note that we are only concerned with **Class Diagram** UML Diagram Type Description Class Diagram Represents the static structure of a system, depicting classes, attributes, operations, and relationships.</description>
    </item>
    
    <item>
      <title>Lecture Seven -  OOP IV (Object Slicing, Pointers to Object, Array of Objects)</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-seven-oop-iv-object-slicing-pointers-to-object-array-of-objects/</link>
      <pubDate>Sun, 31 Dec 2023 22:10:45 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-seven-oop-iv-object-slicing-pointers-to-object-array-of-objects/</guid>
      <description>Object Slicing When a derived class object is assigned to a base class object in C++, the derived class object’s extra attributes are sliced off (not considered) to generate the base class object; and this whole process is termed object slicing.
consider this coding example:
we have a super class that has some integer member data (a).
1 2 3 4 5 6 7 8 9 class superClass { protected: int a; public: superClass(int aNum) : a(aNum){}; virtual void display() { cout &amp;lt;&amp;lt; &amp;#34;I&amp;#39;m a super class with these data: &amp;#34; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; }; }; and a derived class, with other member values b and c.</description>
    </item>
    
    <item>
      <title>Lecture Six -   OOP III (Polymorphism, override, overload, virtual, friend)</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-six-oop-iii/</link>
      <pubDate>Sun, 31 Dec 2023 19:35:50 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-six-oop-iii/</guid>
      <description>Function Overloading: provides multiple definitions of the function by changing signature i.e. changing number of parameters, change datatype of parameters, return type doesn’t play any role.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // overloaded functions void test(int); void test(float); void test(int, float); // Method 1 void test(int var) { cout &amp;lt;&amp;lt; &amp;#34;Integer number: &amp;#34; &amp;lt;&amp;lt; var &amp;lt;&amp;lt; endl; } // Method 2 void test(float var) { cout &amp;lt;&amp;lt; &amp;#34;Float number: &amp;#34;&amp;lt;&amp;lt; var &amp;lt;&amp;lt; endl; } // Method 3 void test(int var1, float var2) { cout &amp;lt;&amp;lt; &amp;#34;Integer number: &amp;#34; &amp;lt;&amp;lt; var1; cout &amp;lt;&amp;lt; &amp;#34; and float number:&amp;#34; &amp;lt;&amp;lt; var2; } 1 2 3 4 5 6 7 8 9 int main() { int a = 5; float b = 5.</description>
    </item>
    
    <item>
      <title>Lecture Five - OOP II (Inheritance and Constructors)</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-five-oop-ii/</link>
      <pubDate>Sat, 30 Dec 2023 01:03:40 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-five-oop-ii/</guid>
      <description>First let&amp;rsquo;s Discuss Inheritance in C++.
####Inheritance:
Is to create child classes from a parent class, inheriting all it&amp;rsquo;s features and more!
Derived classes absorb all features of existing classes including their data and functions. Also enhance them by adding their own new features in form of new data members and new member functions
Inheritance provides us a mechanism of software reusability which is one of the most important principles of software engineering ####Visibility:</description>
    </item>
    
    <item>
      <title>Lecture Four - OOP I (Identity, Classification, Abstraction, Encapsulation)</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-four-oop-i/</link>
      <pubDate>Thu, 28 Dec 2023 01:16:27 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-four-oop-i/</guid>
      <description>Object-orientation is a way of thinking about problems using models built from real-world concepts.
and i&amp;rsquo;ve already made a page for the main concepts in my (OO though process) book summary you WILL need to check it out.
History of OOP (Found in linkedin)
Object-oriented programming has its roots in the research and experiments of computer scientists in the 1960s and 1970s. One of the pioneers of OOP was Ole-Johan Dahl, who along with Kristen Nygaard, developed the first object-oriented language, Simula, in 1967.</description>
    </item>
    
    <item>
      <title>Lecture Three - Pointers</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-three-pointers/</link>
      <pubDate>Thu, 28 Dec 2023 00:08:51 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-three-pointers/</guid>
      <description>Any fool can write code the computers can understand. Only good programmers write code that humans can understand. -Martin Fowler
Any fool can write code the computers can understand. Only good programmers write code that humans can understand. **	Martin Fowler**
they also say
Using pointers is like dancing with the elephants Tom Cargill
and the inventor of C++:
C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off Bjarne Stroustrup</description>
    </item>
    
    <item>
      <title>Lecture Two -   Structs Revision</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-two-structs-revision/</link>
      <pubDate>Wed, 27 Dec 2023 22:45:47 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-two-structs-revision/</guid>
      <description>Structure: C++ construct that allows multiple related variables to be grouped together
General Format:
1 2 3 4 5 6 struct &amp;lt;structName&amp;gt; { type1 field1; type2 field2; . . . }; // must have ; How to access structs? You can access structs and assign new date using the . operator, you also can use the input streams with it.
1 2 3 cin &amp;gt;&amp;gt; stud1.studentID; getline(cin, stud1.name); stud1.gpa = 3.</description>
    </item>
    
    <item>
      <title>Lecture One - Introduction to Object Oriented</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-one-introduction-to-object-oriented/</link>
      <pubDate>Wed, 27 Dec 2023 21:59:24 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/lecture-one-introduction-to-object-oriented/</guid>
      <description>Many languages support OOP, e.g. Java and C#, but C++ has many technicalities and rich OOP features, its implementation and runtime system make it well-adapted to the low-level application areas.
A programming language is a problem solving tool.
A program is a solution to a problem
A programming paradigm is a way for organizing the program code.
A programming language follows one or more programming paradigm
###Notice how to write a factorial function in both 3 paradigms</description>
    </item>
    
    <item>
      <title>CS213 Object Oriented Programming</title>
      <link>https://albasel.netlify.app/courses/cs213-object-oriented-programming/cs213-object-oriented-programming/</link>
      <pubDate>Wed, 27 Dec 2023 21:35:03 +0200</pubDate>
      
      <guid>https://albasel.netlify.app/courses/cs213-object-oriented-programming/cs213-object-oriented-programming/</guid>
      <description>بسم الله الرحمن الرحيم
What is this page? These are my notes for CS213 OOP course created for the purpose of revision for the finals.
What can i find here ? My notes for:
Summary for each lecture. Code snippets. Code examples for each topic, created by me. Solutions and tasks. Interactive Examples. </description>
    </item>
    
  </channel>
</rss>
